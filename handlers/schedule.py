from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from keyboards.inline import get_schedule_keyboard, get_back_button
from utils.schedule_parser import schedule_parser

router = Router()


@router.message(Command("schedule"))
async def cmd_schedule(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule"""
    await message.answer(
        "üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π</b>\n\n–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
        reply_markup=get_schedule_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "schedule")
async def show_schedule_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–Ω—è"""
    await callback.message.edit_text(
        "üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π</b>\n\n–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
        reply_markup=get_schedule_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("schedule_"))
async def show_day_schedule(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å"""
    day = callback.data.split("_")[1]
    
    day_names = {
        'monday': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'tuesday': '–≤—Ç–æ—Ä–Ω–∏–∫',
        'wednesday': '—Å—Ä–µ–¥–∞',
        'thursday': '—á–µ—Ç–≤–µ—Ä–≥',
        'friday': '–ø—è—Ç–Ω–∏—Ü–∞',
        'saturday': '—Å—É–±–±–æ—Ç–∞'
    }
    
    day_names_ru = {
        'monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
        'wednesday': '–°—Ä–µ–¥–∞',
        'thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
        'friday': '–ü—è—Ç–Ω–∏—Ü–∞',
        'saturday': '–°—É–±–±–æ—Ç–∞'
    }
    
    day_ru = day_names.get(day, '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
    lessons = schedule_parser.get_day_schedule(day_ru)
    
    if not lessons:
        schedule_text = "–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π üéâ"
    else:
        schedule_lines = []
        for i, lesson in enumerate(lessons, 1):
            lesson_type = lesson.get('type', '')
            type_emoji = {
                '–õ–µ–∫—Ü–∏—è': 'üìö',
                '–ü—Ä–∞–∫—Ç–∏–∫–∞': '‚úèÔ∏è',
                '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è': 'üî¨'
            }.get(lesson_type, 'üìñ')
            
            schedule_lines.append(
                f"{i}. {lesson['time']} {type_emoji}\n"
                f"   <b>{lesson['subject']}</b>\n"
                f"   üë®‚Äçüè´ {lesson['teacher']}\n"
                f"   üö™ {lesson['room']}"
            )
        schedule_text = "\n\n".join(schedule_lines)
    
    text = (
        f"üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_names_ru[day]}</b>\n\n"
        f"{schedule_text}"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_button(),
        parse_mode="HTML"
    )
    await callback.answer()
